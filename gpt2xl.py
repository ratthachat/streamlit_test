import streamlit as st
import pandas as pd
from googletrans import Translator # somehow, this stop working
from google_trans_new import google_translator  
from gtts import gTTS

import os
import openai
import html
from googleapiclient.discovery import build

import booste

booste_api = "bca1660f-dbf6-4077-a85c-f2b865f06969"

state_file_en = 'all_chats_with_hidden_prompt_eng.txt'
state_file_lang = 'all_chats_with_hidden_prompt_lang.txt'
MAX_USER_CHARS = 200 # user's input is limited to approx. 50 tokens as suggested by OpenAI

##########################
widget_count= 0

st.set_page_config(layout="wide")
st.title('ThaiKeras-Streamlit-GPT2XL')
st.markdown('''
            *Powered by GPT-2, Cloud Translation and Streamlit*
            
            All conversations are generated by GPT-2 (English) and Cloud translator to a chosen langauge. 
            ''')
st.write(f'streamlit version : {st.__version__}')
st.markdown('---')

##### Sidebar
if st.sidebar.button('Reset all conversation'):
    if os.path.exists(state_file_en):
        os.remove(state_file_en)
        os.remove(state_file_lang)
        st.sidebar.warning('Reset conversation')

st.sidebar.markdown('-----')
        
lang_option = st.sidebar.selectbox('Choose language',
                              (('zh-cn','Chinese Mandarin'),
                               ('en','English'),
                               ('es','Spanish'),
                               ('fr','French'),
                               ('de','German'),
                               ('it','Italian'),
                               ('ja','Japanese'),
                               ('ko','Korean'),
                               ('ru','Russian'),
                               ('th','Thai')), 
                             )
chosen_lang = lang_option[0]
st.sidebar.write('You selected:', chosen_lang)

show_eng = st.sidebar.checkbox('Show English conversation', value=True)

translator_option = st.sidebar.selectbox('Choose Translator :',
                              ('Free Google', 
                               'Paid Google', 
                              )
                             )
st.sidebar.write('You selected:', translator_option)


level_option = st.sidebar.selectbox('Conversation level :',
                              ('8-Years Old', 
                               'High School', 
                               'Bachelor Degree',
                              )
                             )
st.sidebar.write('You selected:', level_option)

who_option = st.sidebar.selectbox('A person you talk with :',
                              ('Friend', 
                               'Staff', 
                               'Teacher',
                               'Your Own Kid',
                               'Scientist',
                               'Doctor',
                              )
                             )
st.sidebar.write('You selected:', who_option)

where_option = st.sidebar.selectbox('At a place :',
                              ('Shopping Mall', 
                               'Restaurant', 
                               'Cafeteria',
                               'Drug Store',
                               'School',
                               'Cinema',
                               'Public Park',
                               'Electronic Shop',
                               'Concert Hall',
                               'University',
                               'Library',
                               'Bookshop',
                               'Hospital',
                               'Science Lab',
                               'Computer Lab',
                               'Your Own House',
                               'Online Chat',
                               'Gym',
                               'Zoo',
                              )
                             )
st.sidebar.write('You selected:', where_option)

listen_option = True #st.sidebar.checkbox('Listen Mode', value=False)

show_hidden = st.sidebar.checkbox('Show Hidden Example', value=True)

# openai.api_key = st.secrets['gpt3_key']
# google_translate_key = st.secrets['google_translate_key']
# goog_translate_service = build('translate', 'v2', developerKey=google_translate_key) #500K chars / month -- AWS and Azure give 2M free chars

##########  End sidebar
# helper functions
def extract_sentence_ignore_who(sentence):
    idx = sentence.find(':')
    return sentence[idx+1:]
  
@st.cache
def get_init_prompt(start_sentence, level, who_option, listen_mode=False):
    init_prompt = 'Once upon a time, there is a village of Unicorn'
    init_user_conversation = ''
    return init_prompt, init_user_conversation

def my_translator(sentence, lang_tgt=chosen_lang, lang_src='en'):
    if lang_tgt ==  lang_src:
        return sentence
    
    translator = google_translator() # free, phase-based stupid model
    return html.unescape(translator.translate(sentence, lang_tgt=lang_tgt))

# Follow OpenAI Best practice
def is_safe(text):
    return True
           
def safe_conversation_generator(hidden_prompt_en):
    return False

def long_conversation_generator(hidden_prompt_en):
    out_list = booste.gpt2(booste_api, hidden_prompt_en, 50)
    generated_text = html.unescape(" ".join(out_list))
           
    if is_safe(generated_text) == False:
        generated_text = "There's a temporary error on generator. Please try again."

    return generated_text

######## end helper functions

### Start Bot layout
context_en = f'You meet a {who_option.lower()} at a {where_option.lower()}. You can talk anything to that {who_option.lower()} here, just like real-life conversation'
init_prompt_en, init_conversation_en = get_init_prompt(context_en, level_option, who_option, listen_mode=listen_option)
user_pronoun_en = 'You'
user_pronoun_lang = my_translator(user_pronoun_en, lang_tgt=chosen_lang)
who_option_lang = my_translator(who_option, lang_tgt=chosen_lang)


if os.path.exists(state_file_en):
    # if exist, read current one 
    conversation_fp= open(state_file_en,"r+")
    conversation_lang_fp= open(state_file_lang,"r+")
else:
    # if not exist, create a new file with default prompts
    conversation_fp= open(state_file_en,"w+")    
    conversation_lang_fp= open(state_file_lang,"w+")
 
current_conver_en = conversation_fp.read() # current conversation NOT include init_prompt
current_conver_lang = conversation_lang_fp.read() #my_translator(current_conver_en, lang_tgt=chosen_lang)

context_lang = my_translator(context_en, lang_tgt=chosen_lang)
st.markdown(context_en + '\n\n' + context_lang)

hidden_prompt_en = init_prompt_en

if show_hidden:
    st.text_area('hidden prompt', hidden_prompt_en, height=300, key = widget_count)
    widget_count += 1

if show_eng:
    col1, col2 = st.beta_columns(2)
else:
    col2 = st

##### GPT3 flow start -- Prompt generation
if True: # listening mode, no input
    generated_en = long_conversation_generator(hidden_prompt_en)
    generated_lang = my_translator(generated_en, lang_tgt=chosen_lang)
    title_lang = my_translator('Generated Conversation', lang_tgt=chosen_lang)
    col2.text_area(title_lang, generated_lang, height=300, key = widget_count)
    widget_count += 1
    
    tts_lang = gTTS(generated_lang,lang=chosen_lang)
    sound_lang = 'lang.wav'
    tts_lang.save(sound_lang)
    audio_lang = open(sound_lang, 'rb')
    audio_bytes_lang = audio_lang.read()
    col2.audio(audio_bytes_lang)
    
    if show_eng:
        col1.text_area('Generated Conversation', generated_en, height=300, key = widget_count)
        widget_count += 1

        tts = gTTS(generated_en)
        sound_file1 = '1.wav'
        tts.save(sound_file1)
        audio_file = open(sound_file1, 'rb')
        audio_bytes = audio_file.read()
        col1.audio(audio_bytes)

